@page "/"
@using FrontEnd.Data
@inject WeatherForecastClient ForecastClient

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v6.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3-cloud/1.2.5/d3.layout.cloud.min.js"></script>

<PageTitle>Resume Analyzer</PageTitle>

<div class="container">
    <div class="content">
        <div id="enter_data">
            <h1>Enter your resume</h1>
            <p>Please enter your information:</p>
        </div>
        <div id="data_recieved" style="display: none">
            <h1>Resume received!</h1>
            <p>The information you entered is as follows:</p>
        </div>

        <div class="form-group">
            <label for="name">Name:</label>
            <input id="name" asp-for="name" class="form-control" />
            <span asp-validation-for="name"></span>
        </div>

        <div class="form-group">
            <label for="skills">Skills:</label>
            <textarea id="skills" asp-for="skills" class="form-control" placeholder="Please separate skills with commas."></textarea>
            <span asp-validation-for="skills"></span>
        </div>

        <div class="form-group">
            <label for="experience">Experience:</label>
            <textarea id="experience" asp-for="experience" class="form-control" placeholder="Enter any relevant experiences you want to share!"></textarea>
            <span asp-validation-for="experience"></span>
        </div>

        <button id="submit_button" type="button" onclick="analyze()" class="submit_button">Submit</button>
        
        <div id="edit_div" style="display: none;">
            <p>See something wrong?</p>
            <button id="edit_button" type="button" onclick="editSubmission()" class="submit_button">Edit information</button>
            <div class="plotcontainer">
                <div>
                    <h3>Your most used words:</h3>
                    <div id="word-cloud"></div>
                </div>
                <div>
                    <h3>Your top 5 skills:</h3>
                    <div id="chart"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function countSkills(skills_arr, experience) {
        const skillCounts = {};

        skills_arr.forEach(skill => {
            // Escape special characters for RegExp
            const escapedSkill = skill.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            // Create a pattern to match the skill with word boundaries or special characters
            const pattern = new RegExp('(?:\\b|\\W|^)' + escapedSkill + '(?:\\b|\\W|$)', 'gi');
            const matches = experience.match(pattern);
            skillCounts[skill] = matches ? matches.length : 0;
        });

        return skillCounts;
    }

    function plot(skillCounts, skills_arr){
        // Remove existing SVG if it exists
        d3.select("#chart svg").remove();

        // Sort from largest to smallest and take the top 5
        skills_arr.sort((a, b) => skillCounts[b] - skillCounts[a]);
        const topSkills = skills_arr.slice(0, 5); // Keep only top 5 skills

        // Set the dimensions and margins of the graph
        const margin = {top: 10, right: 30, bottom: 20, left: 100},
            width = 460 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        // Append the svg object to the body of the page
        const svg = d3.select("#chart")
            .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

        // Y axis
        const y = d3.scaleBand()
            .range([0, height])
            .domain(topSkills)
            .padding(0.1);

        svg.append("g")
            .call(d3.axisLeft(y));

        // X axis
        const maxSkillCount = Math.ceil(d3.max(topSkills.map(skill => skillCounts[skill])));
        const x = d3.scaleLinear()
            .domain([0, maxSkillCount])
            .range([0, width]);

        const xAxisTicks = d3.range(0, maxSkillCount + 1);
        svg.append("g")
            .attr("transform", `translate(0,${height})`)
            .call(d3.axisBottom(x).tickValues(xAxisTicks).tickFormat(d3.format('d')));

        // Bars with loading animation
        svg.selectAll("mybar")
            .data(topSkills)
            .join("rect")
                .attr("y", d => y(d))
                .attr("height", y.bandwidth())
                .attr("fill", "#69b3a2")
            .transition() // Add transition for loading animation
                .duration(800)
                .attr("width", d => x(skillCounts[d]))
                .attr("x", 0);
    }

    function createWordCloud(experience) {
        // Use a regular expression that includes C# and C++ like patterns
        let words = experience.match(/[\w#++]+/g);
        let frequency = {};
        words.forEach(word => {
            word = word.toLowerCase(); // Convert to lower case
            if (!frequency[word]) {
                frequency[word] = 0;
            }
            frequency[word]++;
        });

        // Prepare data for the word cloud
        let data = Object.keys(frequency).map(key => {
            return {text: key, size: frequency[key]};
        });

        // Set up the dimensions for the word cloud
        const margin = {top: 10, right: 30, bottom: 20, left: 100},
            width = 460 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        // Function to scale word sizes
        const sizeScale = d3.scaleLinear()
            .domain([d3.min(data, d => d.size), d3.max(data, d => d.size)])
            .range([10, 100]);

        // Set up the word cloud layout
        const layout = d3.layout.cloud()
            .size([width, height])
            .words(data)
            .padding(5)
            .rotate(() => ~~(Math.random() * 2) * 90)
            .fontSize(d => sizeScale(d.size))
            .on("end", draw);

        // Function to draw the word cloud
        function draw(words) {
            // Remove existing SVG if it exists
            d3.select("#word-cloud svg").remove();

            const svg = d3.select("#word-cloud").append("svg")
                .attr("width", layout.size()[0])
                .attr("height", layout.size()[1])
                .append("g")
                .attr("transform", "translate(" + layout.size()[0] / 2 + "," + layout.size()[1] / 2 + ")");

            const text = svg.selectAll("text")
                .data(words)
                .enter().append("text")
                .style("font-size", "1px")
                .style("fill", "#69b3a2")
                .attr("text-anchor", "middle")
                .attr("transform", "translate(0,0) rotate(0)")
                .text(d => d.text);

            // Animate the transition of each word to its final position and size
            text.transition()
                .duration(1000) // Duration of the animation in milliseconds
                .style("font-size", d => d.size + "px")
                .attr("transform", d => "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")");
        }

        // Start the word cloud layout
        layout.start();
    }

    function analyze(){
        const name = document.getElementById("name").value;
        const skills = document.getElementById("skills").value;
        const experience = document.getElementById("experience").value;
        document.getElementById("name").readOnly = true;
        document.getElementById("skills").readOnly = true;
        document.getElementById("experience").readOnly = true;
        document.getElementById("submit_button").style.display = "none";
        document.getElementById("edit_div").style.display = "block";
        document.getElementById("enter_data").style.display = "none";
        document.getElementById("data_recieved").style.display = "block";
        const skills_arr = String(skills).split(",");
        const skillCounts = countSkills(skills_arr, String(experience));
        
        // alert(JSON.stringify(skillCounts));
        plot(skillCounts, skills_arr);
        createWordCloud(experience);
    }

    function editSubmission(){
        document.getElementById("submit_button").style.display = "block";
        document.getElementById("edit_div").style.display = "none";
        document.getElementById("name").readOnly = false;
        document.getElementById("skills").readOnly = false;
        document.getElementById("experience").readOnly = false;
        document.getElementById("enter_data").style.display = "block";
        document.getElementById("data_recieved").style.display = "none";
    }
</script>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastClient.GetForecastAsync(DateTime.Now);
    }
}

<style>
    .container {
        max-width: 1200px;
        margin: auto;
        padding: 20px;
        background: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .content {
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 8px 15px;
        margin: 5px 0;
        box-sizing: border-box;
        border: 2px solid #ddd;
        border-radius: 4px;
    }

    .form-control:focus {
        border-color: #04AA6D;
        outline: none;
    }

    .submit_button {
        background-color: #04AA6D; /* Green */
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition-duration: 0.4s;
    }

    .submit_button:hover {
        background-color: #028051; /* Darker Green */
    }

    .plotcontainer {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        align-items: flex-start;
    }

    .plotcontainer > div {
        margin: 10px 5px;
        padding: 10px;
    }

    #chart, #word-cloud {
        width: 100%;
        height: 400px;
    }

    /* Media query for smaller screens */
    @@media (max-width: 1200px) {
        .plotcontainer > div {
            flex-basis: 100%;
        }

        .plotcontainer {
            align-items: center;
        }
    }
</style>