@page "/"
@using FrontEnd.Data
@inject WeatherForecastClient ForecastClient

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v6.js"></script>

<PageTitle>Resume Analyzer</PageTitle>

<div id="input" style="display: block;">
    <div id="enter_data">
        <h1>Enter your resume</h1>
        <p>Please enter your information:</p>
    </div>
    <div id="data_recieved" style="display: none">
        <h1>Resume recieved!</h1>
        <p>The information you entered is as follows:</p>
    </div>

    <table class="table">
        <tbody>
            <tr>
                <td style="width: 20%;">Name: </td>
                <td style="width: 60%px;">
                    <input id="name" asp-for="name" style="width: 100%;" />
                    <span asp-validation-for="name"></span>
                </td>
            </tr>
            <tr>
                <td>Skills: </td>
                <td>
                    <textarea id="skills" asp-for="skills" placeholder="Please separate skills with commas." style="height: 50px; min-height: 50px; width: 100%;"></textarea>
                    <span asp-validation-for="skills"></span>
                </td>
            </tr>
            <tr>
                <td>Experience: </td>
                <td>
                    <textarea id="experience" asp-for="experience" placeholder="Enter any relevant experiences you want to share!" style="height: 100px; min-height: 100px; width: 100%;"></textarea>
                    <span asp-validation-for="experience"></span>
                </td>
            </tr>
        </tbody>
    </table>
    <button id="submit_button" type="button" onclick="analyze()" class="button submit_button">Submit</button>
    <div id="edit_div" style="display: none;">
        <p>See something wrong?</p>
        <button id="edit_button" type="button" onclick="editSubmission()" class="button submit_button">Edit information</button>
        <h3>Your top 5 skills:</h3>
        <div id="chart"></div>
    </div>
</div>

<script>
    function countSkills(skills_arr, experience) {
        const skillCounts = {};

        skills_arr.forEach(skill => {
            // Escape special characters for RegExp
            const escapedSkill = skill.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            // Create a pattern to match the skill with word boundaries or special characters
            const pattern = new RegExp('(?:\\b|\\W|^)' + escapedSkill + '(?:\\b|\\W|$)', 'gi');
            const matches = experience.match(pattern);
            skillCounts[skill] = matches ? matches.length : 0;
        });

        return skillCounts;
    }

    function plot(skillCounts, skills_arr){
        // Remove existing SVG if it exists
        d3.select("#chart svg").remove();

        // Sort from largest to smallest and take the top 5
        skills_arr.sort((a, b) => skillCounts[b] - skillCounts[a]);
        const topSkills = skills_arr.slice(0, 5); // Keep only top 5 skills

        // Set the dimensions and margins of the graph
        const margin = {top: 10, right: 30, bottom: 20, left: 100},
            width = 460 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        // Append the svg object to the body of the page
        const svg = d3.select("#chart")
            .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

        // Y axis
        const y = d3.scaleBand()
            .range([0, height])
            .domain(topSkills)
            .padding(0.1);

        svg.append("g")
            .call(d3.axisLeft(y));

        // X axis
        const maxSkillCount = Math.ceil(d3.max(topSkills.map(skill => skillCounts[skill])));
        const x = d3.scaleLinear()
            .domain([0, maxSkillCount])
            .range([0, width]);

        const xAxisTicks = d3.range(0, maxSkillCount + 1);
        svg.append("g")
            .attr("transform", `translate(0,${height})`)
            .call(d3.axisBottom(x).tickValues(xAxisTicks).tickFormat(d3.format('d')));

        // Bars with loading animation
        svg.selectAll("mybar")
            .data(topSkills)
            .join("rect")
                .attr("y", d => y(d))
                .attr("height", y.bandwidth())
                .attr("fill", "#69b3a2")
            .transition() // Add transition for loading animation
                .duration(800)
                .attr("width", d => x(skillCounts[d]))
                .attr("x", 0);
    }

    function analyze(){
        const name = document.getElementById("name").value;
        const skills = document.getElementById("skills").value;
        const experience = document.getElementById("experience").value;
        document.getElementById("name").readOnly = true;
        document.getElementById("skills").readOnly = true;
        document.getElementById("experience").readOnly = true;
        document.getElementById("submit_button").style.display = "none";
        document.getElementById("edit_div").style.display = "block";
        document.getElementById("enter_data").style.display = "none";
        document.getElementById("data_recieved").style.display = "block";
        const skills_arr = String(skills).split(",");
        const skillCounts = countSkills(skills_arr, String(experience));
        // alert(JSON.stringify(skillCounts));
        plot(skillCounts, skills_arr);
    }

    function editSubmission(){
        document.getElementById("submit_button").style.display = "block";
        document.getElementById("edit_div").style.display = "none";
        document.getElementById("name").readOnly = false;
        document.getElementById("skills").readOnly = false;
        document.getElementById("experience").readOnly = false;
        document.getElementById("enter_data").style.display = "block";
        document.getElementById("data_recieved").style.display = "none";
    }
</script>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastClient.GetForecastAsync(DateTime.Now);
    }
}

<style>
    .submit_button {
    transition-duration: 0.4s;
    border-radius: 5px;
    border-color: transparent;
    background-color: #04AA6D; /* Green */
    color: white;
    }

    .submit_button:hover {
    background-color: #028051; /* Green */
    color: white;
    }
</style>
